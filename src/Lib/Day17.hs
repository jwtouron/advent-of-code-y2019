module Lib.Day17
  ( spec
  )
where

import           Control.Lens
import           Data.Char
import           Data.Foldable
import           Data.List                      ( inits
                                                , tails
                                                )
import           Data.List.Split                ( splitOn )
import           Data.List.Utils                ( replace )
import           Data.Maybe
import           Data.Sequence                  ( Seq )
import qualified Data.Sequence                 as Seq
import           Lib.Util
import           Lib.Intcode

input :: IO [Int]
input = map read . splitOn "," <$> readFile "input/day17.txt"

valAt :: (Int, Int) -> Seq (Seq Char) -> Maybe Char
valAt (x, y) seq = do
  seq' <- seq Seq.!? y
  seq' Seq.!? x

runRobot :: [Int] -> Machine
runRobot program = runUntilHalted (newMachine program [])

outputToStr :: Machine -> String
outputToStr robot = map chr $ toList $ robot ^. outputs

solvePart1 :: [Int] -> Int
solvePart1 program = foldl' f 0 [ (x, y) | x <- [1 .. width - 2], y <- [1 .. height - 2] ]
 where
  f sum' (x, y) =
    let isIntersection = all (== '#') $ catMaybes $ map
          (\(x', y') -> valAt (x + x', y + y') output)
          [(0, 0), (1, 0), ((-1), 0), (0, 1), (0, (-1))]
    in  if isIntersection then sum' + x * y else sum'
  height = Seq.length output
  width  = Seq.length $ Seq.index output 0
  output :: Seq (Seq Char)
  output = Seq.fromList $ map Seq.fromList $ lines $ outputToStr $ runRobot program

directions :: String
directions =
  "R,6,L,10,R,8,R,8,R,12,L,8,L,10,R,6,L,10,R,8,R,8,R,12,L,10,R,6,L,10,R,12,L,8,L,10,R,12,L,10,R,6,L,10,R,6,L,10,R,8,R,8,R,12,L,8,L,10,R,6,L,10,R,8,R,8,R,12,L,10,R,6,L,10"

substrings :: [a] -> [[a]]
substrings s = tail . inits =<< tails s

part2Input :: [Int]
part2Input =
  (map ord main ++ [10])
    ++ (map ord funcA ++ [10])
    ++ (map ord funcB ++ [10])
    ++ (map ord funcC ++ [10])
    ++ ([ord 'n', 10])
 where
  (main, funcA, funcB, funcC) =
    head
      $ [ (directions4, sub1, sub2, sub3)
        | sub1 <- tail $ substrings directions
        , subseqOk sub1
        , let directions2 = replace sub1 "A" directions
        , sub2 <- tail $ substrings directions2
        , subseqOk sub2
        , let directions3 = replace sub2 "B" directions2
        , sub3 <- tail $ substrings directions3
        , subseqOk sub3
        , let directions4 = replace sub3 "C" directions3
        , all (`elem` "ABC,") directions4
        ]
   where
    subseqOk (',' : _) = False
    subseqOk s         = subseqOk' s (0 :: Int)
    subseqOk' _ n | n > 20 = False
    subseqOk' ('A' : _) _  = False
    subseqOk' ('B' : _) _  = False
    subseqOk' ('C' : _) _  = False
    subseqOk' [','    ] _  = False
    subseqOk' (_ : xs ) n  = subseqOk' xs (n + 1)
    subseqOk' []        _  = True

solvePart2 :: [Int] -> Int
solvePart2 program =
  last $ toList $ runUntilHalted (newMachine (2 : tail program) part2Input) ^. outputs

spec :: Spec
spec = mkSpec input 17 [(`shouldBe` 8408) . solvePart1, (`shouldBe` 1168948) . solvePart2]


-- >>> input >>= putStrLn . outputToStr . runRobot
-- ........................................#########...........#########........
-- ........................................#.......#...........#.......#........
-- ........................................#.......#...........#.......#........
-- ........................................#.......#...........#.......#........
-- ........................................#.......#...........#.......#........
-- ........................................#.......#...........#.......#........
-- ........................................#.......#...........#.......#........
-- ........................................#.......#...........#.......#........
-- ........................................#.......#.......#############........
-- ........................................#.......#.......#...#................
-- #########...................#############.......#.....^######................
-- #.......#...................#...................#.......#....................
-- #.......#...................#...................###########..................
-- #.......#...................#...........................#.#..................
-- #.......#...................#...........................#.#..................
-- #.......#...................#...........................#.#..................
-- #.......#...................#...........................###########..........
-- #.......#...................#.............................#.......#..........
-- ###########.................#.............................###########........
-- ........#.#.................#.....................................#.#........
-- ........#.#...........#######.....................................#.#........
-- ........#.#...........#...........................................#.#........
-- ........###########...#...........................................###########
-- ..........#.......#...#.............................................#.......#
-- ..........###########.#.............................................#.......#
-- ..................#.#.#.............................................#.......#
-- ..................#.#.#.............................................#.......#
-- ..................#.#.#.............................................#.......#
-- ..................###########.......................................#.......#
-- ....................#.#.............................................#.......#
-- ................#######.............................................#########
-- ................#...#........................................................
-- ........#############........................................................
-- ........#.......#............................................................
-- ........#.......#............................................................
-- ........#.......#............................................................
-- ........#.......#............................................................
-- ........#.......#............................................................
-- ........#.......#............................................................
-- ........#.......#............................................................
-- ........#########............................................................
